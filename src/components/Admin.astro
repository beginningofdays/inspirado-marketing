<div class="flex-column mb-3">
  <div class="component-title-wrapper">
      <div class="component-line"></div>
      <h2>Administration Page - Inspirado Marketing</h2>
      <div class="component-line"></div>
  </div>
  <div class="component-admin-form pt-3 pb-3">
      <h3>Filter Data:</h3>
      <!-- Filter Inputs in two rows and buttons in one row -->
      <div class="filter-container">
          <div class="filter-row">
              <label for="filterFirstname">First Name:</label>
              <input type="text" id="filterFirstname">
              
              <label for="filterLastname">Last Name:</label>
              <input type="text" id="filterLastname">
          </div>
              
          <div class="filter-row">
              <label for="filterCompanyName">Company Name:</label>
              <input type="text" id="filterCompanyName">
              
              <label for="filterEmail">Email:</label>
              <input type="text" id="filterEmail">
              
              <label for="filterDate">Date:</label>
              <input type="date" id="filterDate">
          </div>

          <div class="button-row">
              <button id="filterButton">Apply Filter</button>
              <button id="clearButton">Clear Filters</button>
          </div>
      </div>

      <span class="admin-title"><h3>Data:</h3></span>
      <!-- Table for displaying data -->
      <table id="dataTable">
          <thead>
              <tr>
                  <th>First Name</th>
                  <th>Last Name</th>
                  <th>Company Name</th>
                  <th>Email</th>
                  <th>Message</th>
                  <th>Date</th>
              </tr>
          </thead>
          <tbody id="dataDisplay">
              <!-- Rows will be inserted here dynamically -->
          </tbody>
      </table>
  </div>
</div>

<script>
class DataManager {
  constructor() {
      // Initialize data and set up event listeners
      this.dataDisplay = document.getElementById('dataDisplay');
      this.loadData();
      this.setUpEventListeners();
  }

  // Load data from localStorage and display it
  loadData() {
      const storedData = localStorage.getItem('formData');
      this.data = storedData ? JSON.parse(storedData) : [];
      this.displayData(this.data);
  }

  // Display data in the table
  displayData(data) {
      if (this.dataDisplay) {
          this.dataDisplay.innerHTML = ''; // Clear previous content

          data.forEach(entry => {
              const row = document.createElement('tr');
              row.innerHTML = `
                  <td>${entry.firstname || 'N/A'}</td>
                  <td>${entry.lastname || 'N/A'}</td>
                  <td>${entry.companyName || 'N/A'}</td>
                  <td>${entry.email || 'N/A'}</td>
                  <td>${entry.message || 'N/A'}</td>
                  <td>${entry.date || 'N/A'}</td>
              `;
              this.dataDisplay.appendChild(row);
          });
      }
  }

  // Apply filters based on user input
  applyFilter() {
      const filterFirstname = (document.getElementById('filterFirstname')?.value.toLowerCase()) || '';
      const filterLastname = (document.getElementById('filterLastname')?.value.toLowerCase()) || '';
      const filterCompanyName = (document.getElementById('filterCompanyName')?.value.toLowerCase()) || '';
      const filterEmail = (document.getElementById('filterEmail')?.value.toLowerCase()) || '';
      const filterDate = (document.getElementById('filterDate')?.value) || '';

      let filteredData = this.data;

      if (filterFirstname) {
          filteredData = filteredData.filter(entry => 
              (entry.firstname || '').toLowerCase().includes(filterFirstname)
          );
      }
      if (filterLastname) {
          filteredData = filteredData.filter(entry => 
              (entry.lastname || '').toLowerCase().includes(filterLastname)
          );
      }
      if (filterCompanyName) {
          filteredData = filteredData.filter(entry => 
              (entry.companyName || '').toLowerCase().includes(filterCompanyName)
          );
      }
      if (filterEmail) {
          filteredData = filteredData.filter(entry => 
              (entry.email || '').toLowerCase().includes(filterEmail)
          );
      }
      if (filterDate) {
          filteredData = filteredData.filter(entry => 
              entry.date?.startsWith(filterDate)
          );
      }

      this.displayData(filteredData);
  }

  // Clear all filters
  clearFilters() {
      const filterElements = ['filterFirstname', 'filterLastname', 'filterCompanyName', 'filterEmail', 'filterDate'];
      filterElements.forEach(id => {
          const element = document.getElementById(id);
          if (element) element.value = '';
      });

      this.displayData(this.data);
  }

  // Set up event listeners for the buttons
  setUpEventListeners() {
      const filterButton = document.getElementById('filterButton');
      const clearButton = document.getElementById('clearButton');

      if (filterButton) filterButton.addEventListener('click', () => this.applyFilter());
      if (clearButton) clearButton.addEventListener('click', () => this.clearFilters());
  }
}

// Instantiate the class when the document is ready
document.addEventListener('DOMContentLoaded', () => {
  new DataManager();
});
</script>

<style>
.admin-title h3 {
  color: red;
}

.component-admin-form h3 {
  color: red;
}
</style>
