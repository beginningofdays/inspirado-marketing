---

---

<div class="flex-column mb-3">
  <div class="component-title-wrapper">
      <div class="component-line"></div>
      <h2>Administration Page - Inspirado Marketing</h2>
      <div class="component-line"></div>
  </div>
  <div class="component-admin-form pt-3 pb-3">
      <h3>Filter Data:</h3>
      <!-- Filter Inputs in two rows and buttons in one row -->
      <div class="filter-container">
          <div class="filter-row">
              <label for="filterFirstname">First Name:</label>
              <input type="text" id="filterFirstname">
              
              <label for="filterLastname">Last Name:</label>
              <input type="text" id="filterLastname">
          </div>
              
          <div class="filter-row">
              <label for="filterCompanyName">Company Name:</label>
              <input type="text" id="filterCompanyName">
              
              <label for="filterEmail">Email:</label>
              <input type="text" id="filterEmail">
              
              <label for="filterDate">Date:</label>
              <input type="date" id="filterDate">
          </div>

          <div class="button-row">
              <button id="filterButton">Apply Filter</button>
              <button id="clearButton">Clear Filters</button>
          </div>
      </div>

      <span class="admin-title"><h3>Data:</h3></span>
      <!-- Table for displaying data -->
      <table id="dataTable">
          <thead>
              <tr>
                  <th>First Name</th>
                  <th>Last Name</th>
                  <th>Company Name</th>
                  <th>Email</th>
                  <th>Message</th>
                  <th>Date</th>
              </tr>
          </thead>
          <tbody id="dataDisplay">
              <!-- Rows will be inserted here dynamically -->
          </tbody>
      </table>
  </div>
</div>

<script>
  // Define the shape of each entry in the data
  interface MarketingInformation {
      firstName?: string;
      lastName?: string;
      companyName?: string;  // Updated from country to companyName
      email?: string;
      message?: string;      // Updated from text to message
      date?: string;
  }

  // Display data in the table
  function displayData(data: MarketingInformation[]) {
      const dataDisplay = document.getElementById('dataDisplay');
      if (dataDisplay) {
          dataDisplay.innerHTML = ''; // Clear previous content

          data.forEach(entry => {
              const row = document.createElement('tr');
              row.innerHTML = `
                  <td>${entry.firstName || 'N/A'}</td>
                  <td>${entry.lastName || 'N/A'}</td>
                  <td>${entry.companyName || 'N/A'}</td>
                  <td>${entry.email || 'N/A'}</td>
                  <td>${entry.message || 'N/A'}</td>
                  <td>${entry.date || 'N/A'}</td>
              `;
              dataDisplay.appendChild(row);
          });
      }
  }

  // Filters based on user input
  function applyFilter() {
      const filterFirstname = (document.getElementById('filterFirstname') as HTMLInputElement)?.value.toLowerCase() || '';
      const filterLastname = (document.getElementById('filterLastname') as HTMLInputElement)?.value.toLowerCase() || '';
      const filterCompanyName = (document.getElementById('filterCompanyName') as HTMLInputElement)?.value.toLowerCase() || '';
      const filterEmail = (document.getElementById('filterEmail') as HTMLInputElement)?.value.toLowerCase() || '';
      const filterDate = (document.getElementById('filterDate') as HTMLInputElement)?.value || '';

      const storedData = localStorage.getItem('formData');
      let allData: MarketingInformation[] = storedData ? JSON.parse(storedData) : [];

      if (filterFirstname) {
          allData = allData.filter((entry: MarketingInformation) => 
              (entry.firstName || '').toLowerCase().includes(filterFirstname)
          );
      }
      if (filterLastname) {
          allData = allData.filter((entry: MarketingInformation) => 
              (entry.lastName || '').toLowerCase().includes(filterLastname)
          );
      }
      if (filterCompanyName) {
          allData = allData.filter((entry: MarketingInformation) => 
              (entry.companyName || '').toLowerCase().includes(filterCompanyName)
          );
      }
      if (filterEmail) {
          allData = allData.filter((entry: MarketingInformation) => 
              (entry.email || '').toLowerCase().includes(filterEmail)
          );
      }
      if (filterDate) {
          allData = allData.filter((entry: MarketingInformation) => 
              entry.date?.startsWith(filterDate)
          );
      }

      displayData(allData);
  }

  // Function to clear all filters
  function clearFilters() {
      const filterFirstname = document.getElementById('filterFirstname') as HTMLInputElement | null;
      const filterLastname = document.getElementById('filterLastname') as HTMLInputElement | null;
      const filterCompanyName = document.getElementById('filterCompanyName') as HTMLInputElement | null;
      const filterEmail = document.getElementById('filterEmail') as HTMLInputElement | null;
      const filterDate = document.getElementById('filterDate') as HTMLInputElement | null;

      if (filterFirstname) filterFirstname.value = '';
      if (filterLastname) filterLastname.value = '';
      if (filterCompanyName) filterCompanyName.value = '';
      if (filterEmail) filterEmail.value = '';
      if (filterDate) filterDate.value = '';

      const storedData = localStorage.getItem('sheetdb-form');
      displayData(storedData ? JSON.parse(storedData) : []);
  }

  // Set up event listeners for filter buttons
  document.addEventListener('DOMContentLoaded', function() {
      const filterButton = document.getElementById('filterButton');
      const clearButton = document.getElementById('clearButton');

      if (filterButton) filterButton.addEventListener('click', applyFilter);
      if (clearButton) clearButton.addEventListener('click', clearFilters);

      // Initial display of data
      const storedData = localStorage.getItem('sheetdb-form');
      displayData(storedData ? JSON.parse(storedData) : []);
  });
</script>

<style>
/* Ensure the flex-column container is properly styled */
.flex-column {
  display: flex;
  flex-direction: column; /* Align children vertically */
  gap: 16px; /* Space between components */
  margin: 0 auto; /* Center align the container if needed */
  padding: 16px; /* Optional: padding for better spacing */
}

.component-title-wrapper {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 8px; /* Space between lines and title */
}

.component-line {
  flex: 1;
  height: 1px;
  background-color: #ccc; /* Light grey line color */
}

.component-admin-form {
  display: flex;
  flex-direction: column;
  gap: 16px; /* Space between form elements */
}

.filter-container {
  display: flex;
  flex-direction: column;
  gap: 16px; /* Space between filter rows */
}

.filter-row {
  display: flex;
  flex-wrap: wrap; /* Allow wrapping if needed */
  gap: 16px; /* Space between filters */
}

.filter-row label {
  min-width: 120px; /* Minimum width for labels */
}

.filter-row input {
  flex: 1; /* Allow input to take available space */
}

.button-row {
  display: flex;
  gap: 16px; /* Space between buttons */
}

button {
  padding: 8px 16px; /* Padding inside buttons */
  font-size: 16px; /* Font size for buttons */
  cursor: pointer; /* Pointer cursor on hover */
}

#dataTable {
  width: 100%; /* Full width of the container */
  border-collapse: collapse; /* Collapse table borders */
}

#dataTable th, #dataTable td {
  border: 1px solid #ddd; /* Light grey border */
  padding: 8px; /* Padding inside table cells */
  text-align: left; /* Left-align text in cells */
}

#dataTable th {
  background-color: #f4f4f4; /* Light grey background for headers */
}

.admin-title h3 {
  color: red;
}

.component-admin-form h3 {
  color: red;
}

</style>
