---

---
<div class="flex-column">
  <section class="component-carousel">
    <div id="carousel-container" class="carousel-container">
      <div class="slider-carousel">
        <div class="slide main">
          <img src="https://cdn.pixabay.com/photo/2015/04/19/08/32/marguerite-729510__480.jpg" alt="flower 1" />
          <div class="image-text">
            <h3>Image 1</h3>
            <p>Subtitle text</p>
          </div>
        </div>
        <div class="slide">
          <img src="https://cdn.pixabay.com/photo/2014/02/27/16/10/tree-276014_960_720.jpg" alt="flower 2" />
          <div class="image-text">Image 2</div>
        </div>
        <div class="slide">
          <img src="https://cdn.pixabay.com/photo/2015/04/23/22/00/tree-736885_960_720.jpg" alt="flower 3" />
          <div class="image-text">Image 3</div>
        </div>
        <div class="navigation-buttons">
          <a class="previous">❮</a>
          <a class="next">❯</a>        
        </div>
      </div>
    </div>
  </section>
</div>

<script src="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.js"></script>

<style>
img {
  vertical-align: middle;
}
.carousel-container {
  width: 100%;
  position: relative;
  margin: 0 auto;
}
.navigation-buttons .previous, 
.navigation-buttons .next {
  cursor: pointer;
  position: absolute;
  top: 50%;
  width: auto;
  padding: 16px;
  margin-top: -22px;
  color: white;
  font-weight: bold;
  font-size: 18px;
  transition: 0.6s ease;
  border-radius: 0 3px 3px 0;
  user-select: none;
}
      
      /* Position the "next button" to the right */
.navigation-buttons .next {
  right: 0;
  border-radius: 3px 0 0 3px;
}
      
.navigation-buttons .nav-btn {
  background: rgba(255, 255, 255, 0.55);
  cursor: pointer;
  border-radius: 50%;
  width: 30px;
  height: 30px;
  display: flex;
  justify-content: center;
  align-items: center;
  padding: 5px;
  box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.4);
}
      
.navigation .nav-btn:hover {
  background: white;
}
      
.slider-carousel {
  transition: all 0.3s ease;
}
.slider-carousel img {
  width: 100%;
  transition: all 0.3s ease;
}
      
.slide {
  aspect-ratio: 2.5;
  width: 100%;
  display: none;
  overflow: hidden;
  justify-content: center;
  align-items: center;
}
.main {
  display: block;
}
.image-text {
  position: absolute;
  bottom: 20%;
  left: 20%;
  padding: 20px; 
  font-size: 20px;
  justify-content: center;
  align-items: center;
  color: rgb(255, 255, 255);
  background: rgba(0, 0, 0, 0.5);
}
.image-text h3,
.image-text p {
  margin: 5px;
}
/* The dots/bullets/indicators */
.navigation-dot-container {
  text-align: center;
  position: absolute;
  bottom: 5%;
  width: 100%; 
}
      
.navigation-dot {
  cursor: pointer;
  height: 15px;
  width: 15px;
  margin: 0 2px;
  background-color: #bbb;
  border-radius: 50%;
  display: inline-block;
  transition: background-color 0.6s ease;
}
.active, .navigation-dot:hover {
  background-color: #717171;
}
      
.slide {
  aspect-ratio: unset;
  flex-direction: column;
  }
.image-text {
  position: unset;
  width: 100%;
  padding: 10px;
  font-size: unset;
}
.navigation-dot-container {
  display: none;
}
    
      
</style>


<script>
  // code is wrapped in an IIFE (Immediately Invoked Function Expression). See https://developer.mozilla.org/en-US/docs/Glossary/IIFE for more details
//
(() => {
  // globals
  const componentCarousel = document.querySelector('.component-carousel');
  let navigationDots = null; // add navigation dots
  const navigationButtons = componentCarousel.querySelectorAll('.navigation-buttons > a')
  const slides = document.getElementsByClassName("slide");

  let currentIndex = 0;
        
  //Initiate moving of slides
  function showSlides(n) {
    let i;
    currentIndex = n;
    for (let i=0; i<slides.length; i++) {
      slides[i].style.display = "none";
    }
    for (let i=0; i<navigationDots.length; i++) {
      navigationDots[i].className = navigationDots[i].className.replace(" active", "");
    }
    slides[currentIndex].style.display = "flex";
    navigationDots[currentIndex].className += " active";
  }

  // named function expression 
  const incrementIndex = (increment) => Math.abs((currentIndex + increment) % slides.length);

  function initCarousel() {
    // start add navigation dots
    let navigationDotsHtml = '';
    for (let i=0; i<slides.length; i++) {
      navigationDotsHtml += '<span class="navigation-dot"></span>';
    }

    const navDotsFragment = new DocumentFragment(); // https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment
    let navDotsDiv = document.createElement("div");
    navDotsDiv.className = 'navigation-dot-container';
    navDotsDiv.innerHTML = navigationDotsHtml;
    navDotsFragment.append(navDotsDiv);
    componentCarousel.querySelector('.carousel-container').appendChild(navDotsFragment);
    navigationDots = componentCarousel.querySelectorAll('.navigation-dot');
    // end add navigation dots

    showSlides(currentIndex);
    // add event handlers for navigation buttons
    navigationButtons.forEach(button => {
      button.addEventListener('click', (event) => {
        event.preventDefault();
        if (event.target.className === 'next') {
          currentIndex = incrementIndex(1);
        }
        if (event.target.className === 'previous') {
          currentIndex = incrementIndex(-1);
        }
        showSlides(currentIndex);
      });
    });
    // add event handlers for navigation dots
    navigationDots.forEach(dot => {
      dot.addEventListener('click', (event) => {
        // find index of current dot
        const parent = event.target.parentNode;
        const index = [].indexOf.call(parent.children, event.target);
        showSlides(index);
      });
    });
    // automate movement of the slides
    setInterval(() => {
      showSlides(incrementIndex(1));
    }, "8000"); 
  }

  window.addEventListener("load", (event => {
    initCarousel();
  }));

})();
</script>